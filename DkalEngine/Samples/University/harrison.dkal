#include "common.dkal"

// Professor trusts its department
harrison knows
  cs tdonS PROFESSOR is lecturer of SUBJECT
  cs tdonS STUDENT enroled in SUBJECT

// Professor trusts any person requesting exams (does not mean he will comply)
harrison knows
  PERSON tdonS PERSON requests contents of exam EXAM

// Communicate students their assignments
if harrison knows
  harrison is lecturer of SUBJECT
  STUDENT enroled in SUBJECT
then
  communicate with justification to STUDENT
    if 
      PROFESSOR said STUDENT enroled in SUBJECT
    then
      cs implied STUDENT enroled in SUBJECT
    harrison said STUDENT enroled in SUBJECT
    if 
      PROFESSOR said PROFESSOR is lecturer of SUBJECT
    then
      cs implied PROFESSOR is lecturer of SUBJECT
    harrison said harrison is lecturer of SUBJECT

// (option 1a) Professor always gives the contents of the exams he wrote to anyone
/*if harrison knows
  PERSON requests contents of exam EXAM
  asInfon(examCreator(EXAM) == harrison)
  asInfon(examContents(EXAM) == S)
then
  say with justification to PERSON
    exam EXAM contents are S*/

// (option 1b) Professor always gives the contents of the exams he wrote to other professors in the subject
if harrison knows
  harrison is lecturer of SUBJECT
  PROFESSOR is lecturer of SUBJECT
  PROFESSOR requests contents of exam EXAM
  asInfon(examCreator(EXAM) == harrison)
  asInfon(examContents(EXAM) == S)
then
  say with justification to PROFESSOR
    exam EXAM contents are S

// (option 2) Professor gives the contents of the exams he wrote, only to students who already took the exam
/*if harrison knows
  STUDENT requests contents of exam EXAM
  asInfon(examCreator(EXAM) == harrison)
  asInfon(studentTookExam(STUDENT,EXAM))
  asInfon(examContents(EXAM) == S)
then
  say with justification to STUDENT
    exam EXAM contents are S*/

// (option 3) Professor gives the contents of the exams he wrote, only to students who already took the exam and failed (grade <= 3)
if harrison knows
  STUDENT requests contents of exam EXAM
  asInfon(examCreator(EXAM) == harrison)
  asInfon(studentTookExam(STUDENT,EXAM))
  asInfon(studentExamGrade(STUDENT,EXAM) == G)
  asInfon(G <= 3)
  asInfon(examContents(EXAM) == S)
then
  say with justification to STUDENT
    exam EXAM contents are S

// (option 4) Professor gives the contents of the exams he wrote, only if all the class has already taken the exam
/*if harrison knows
  XXX not working
  STUDENT requests contents of exam EXAM
  asInfon(examCreator(EXAM) == harrison)
then
  say with justification to STUDENT
    exam EXAM contents are S*/

