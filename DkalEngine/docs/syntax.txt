# DKAL S-expr syntax

policy ::= policy-stmt*

policy-stmt ::= 
  "(" "type" id ")"                              # type declaration
  "(" "me" id ")"                                # declaration for whom the policy is
  "(" "fun" vardecl id vardecl ")"               # uninterpreted function (including infon relations)
  "(" "macro" vardecl id vardecl* bool-term ")"  # SQL-interpreted function
  "(" "comm" infon+ target+ ")"                  # communication rule
  "(" "knows" infon+ ")"                         # knowledge assertion

type-name ::= 
  id
  "principal"
  "infon"
  "bool"
  "any"
  "int" # not strictly necessary

vardecl ::=
  "(" type-name id ")"
  "(" type-name ")"

target ::=
  "(" "to" principal infon* ")" 
  "(" "say" principal infon* ")" 
  "(" "say*" principal infon* ")"  # send with no evidence

infon ::= 
  "(" "empty" ")"
  "(" "and" infon* ")"
  "(" "follows" infon infon ")"
  "(" "said" principal infon ")"
  "(" "implied" principal infon ")"
  "(" "asInfon" bool-term ")"
  "(" "tdonS" principal infon ")"
  "(" "tdonI" principal infon ")"
  "(" id term* ")"                 # id is function name of type (infon)

term ::= 
  "(" "." id id ")"  # SQL column reference
  "(" id term* ")"   # function application
  id                 # variable, constants look like "(foo)"

  # predefined functions follow
  "(" "^" int-term int-term ")"
  "(" "*" int-term int-term ")"
  "(" "/" int-term int-term ")"
  "(" "%" int-term int-term ")"
  "(" "+" int-term int-term ")"
  "(" "-" int-term int-term ")"

  "(" "<=" int-term int-term ")"
  "(" ">=" int-term int-term ")"

  "(" "==" term term ")"

  "(" "&&" bool-term* ")"
  "(" "||" bool-term* ")"
  "(" "true" ")"
  "(" "false" ")"

principal ::= term
bool-term ::= term
int-term  ::= term
