type trial   // trials.id
type patient // patients.id
type record  // records.id
// principal type maps to string

attribute [16] {principal} participates in {trial}
attribute [16] {principal} is assigned id numbers from {int} to {int} in {trial}
attribute [18] {principal} can read {record} in records of trial {trial}
attribute [16] {principal} can read {record} in records of trial {trial} under the authority of {principal}
attribute [16] {principal} is assigned to trial {trial} at {principal}
attribute [16] patient {int} is assigned to {principal} in {trial}
attribute [16] {principal} is a physician assigned to {trial} at {principal}

function [16] {R:record} is a data clarification request in {T:trial} returns {Res:bool}
  is records.id == R && records.trial == T && records.is_clarification == true && Res == true

function [2] patientID ( {R:record} ) returns {P:int}
  is records.id == R && records.patient == P

function [2] croOf ( {T:trial} ) returns {P:principal}
  is trials.id == T && trials.cro == P

function [2] trial0 returns {T:trial}
  is T == trials.id && trials.id == 1

attribute [2] start

#set common_sql  "Server=tcp:v7srhjh9aq.database.windows.net;Database=ftocro;User ID=ecmteam;Password=OrangeJuice100%;Trusted_Connection=False;Encrypt=True;"

#set private_sql "Server=tcp:v7srhjh9aq.database.windows.net;Database=ftoCro;User ID=ecmteam;Password=OrangeJuice100%;Trusted_Connection=False;Encrypt=True;"
#set me "_cro"
#set x "10"
#set y "10"
#set stepwise "0"

if _cro knows 
  SITE participates in T
  SITE is assigned id numbers from N_0 to N_1 in T
then they send
  to SITE with certificate
    if
      asInfon(N_0 <= patientID(R) && patientID(R) <= N_1) 
      SITE implied P can read R in records of trial T under the authority of SITE
    then
      _cro implied P can read R in records of trial T under the authority of SITE

_cro knows 
  _site participates in trial0
  _site is assigned id numbers from 0 to 42 in trial0
