// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel.Composition;
using DkalLib;
using System.ComponentModel.Composition.Hosting;
using System.IO;
using System.ComponentModel.Composition.Primitives;
using System.Reflection;
//using DkalController;
//using DkalLib;

namespace DkalHostConsole
{
    class Program
    {
        [ImportMany]
        public IDkalMessage invokeObj { get; set; }

        static void Main(string[] args)
        {
            Program program = new Program();
            program.Compose();
            program.Run();
        }

        void Compose()
        {
            try
            {
                DirectoryCatalog catalog =
                    new DirectoryCatalog(AppDomain.CurrentDomain.BaseDirectory);

                AggregateCatalog agcatalogue =
                    new AggregateCatalog(new ComposablePartCatalog[] {catalog,
                   new AssemblyCatalog(Assembly.GetExecutingAssembly())});

                CompositionContainer container = new CompositionContainer(agcatalogue);

                CompositionBatch batch = new CompositionBatch();

                batch.AddPart(this);

                container.Compose(batch);
            }
            catch (FileNotFoundException fnfex)
            {
                throw new Exception(fnfex.Message);
            }
            catch (CompositionException cex)
            {
                throw new Exception(cex.Message);
            }
        }

        void Run()
        {
            if (invokeObj != null)
            {
                invokeObj.InvokeMessage();
            }
        }
    }
}

