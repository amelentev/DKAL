// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

using TUVienna.CS_CUP.Runtime;
using System;
using System.IO;
using DkalTranslator;
using System.Collections.Generic;
using System.Collections;

action code {:
	
	SpecList specs = new SpecList();
	StringList principalList = new StringList();
	FunctionDictionary functions = new FunctionDictionary();
	FixedFunctionList fixedFunctions = new FixedFunctionList();

	public StringList getPrincipalList(){
		return principalList;
	}
	public FunctionDictionary getFunctions(){
		return functions;
	}
	public FixedFunctionList getFixedFunctions(){
		return fixedFunctions;
	}
	
	/* Completes the type of the variables looking at the declared type
	*/
	void fillVariableTypes(Function f){

		if (functions.ContainsKey(f.getName())){
			ArrayList declaredArgs;
            functions.TryGetValue(f.getName(), out declaredArgs);
			
			if (declaredArgs.Count != f.getArguments().Count + 1){
                throw new Exception("The function " + f.getName() + " was previously specified with a different number of arguments");
			}
			for (int i = 0; i < f.getArguments().Count; i++){
				if (f.getArguments()[i] is Variable){
					((Variable)(f.getArguments()[i])).setType((string)declaredArgs[i]);
				}
			}
		} else{
            throw new Exception("The function " + f.getName() + " was not declared");
		}
	
	}
:}

init with {:
	//built-in functions
	
	//tdonP and tdonS
	ArrayList tdonArgs = new ArrayList();
	tdonArgs.Add("Principal");
	tdonArgs.Add("Infon");
	tdonArgs.Add("Infon");
	
	action_obj.getFunctions().Add("tdonS", tdonArgs);
	action_obj.getFunctions().Add("tdonP", tdonArgs);
	
	//asInfon
	ArrayList asInfonArgs = new ArrayList();
	asInfonArgs.Add("bool");
	asInfonArgs.Add("Infon");
	
    action_obj.getFunctions().Add("asInfon", asInfonArgs);

	//exists
	ArrayList existsArgs = new ArrayList();
	asInfonArgs.Add("Infon");
	asInfonArgs.Add("Infon");
	
    action_obj.getFunctions().Add("exists", existsArgs);	

	//less, equal, greater
	ArrayList comparisonArgs = new ArrayList();
	comparisonArgs.Add("Int");
	comparisonArgs.Add("Int");
	comparisonArgs.Add("bool");
	
	action_obj.getFunctions().Add("less", comparisonArgs);
	action_obj.getFunctions().Add("greater", comparisonArgs);
:}

parser code {:

	public StringList getPrincipalList(){
		return action_obj.getPrincipalList();
	}
	
	public FunctionDictionary getFunctions(){
		return action_obj.getFunctions();
	}
	
	public FixedFunctionList getFixedFunctions(){
		return action_obj.getFixedFunctions();
	}
	
:}

terminal string COMMA, SEMI, PLUS, IMPLIES, TRUE, KNOWS, SAID, PUT, PROVISO, CONDITIONAL, RBRACKET, FIX, EQUAL;
terminal string TOKEN, VARIABLE, LBRACKET, LPAREN, RPAREN, COLON, TO, FROM, QUESTION, PRINCIPAL, FUNCTION, NUMBER;

non terminal Infon infon, regular;
non terminal Spec assertion;
non terminal To communication;
non terminal From filter;
non terminal Principal object;
non terminal Proviso body;
non terminal Query query;
non terminal Fact fact;
non terminal System.Collections.ArrayList regularList, typeList, principalList, functionList, fixedFunctionList;
non terminal StringList argList;
non terminal SaidPut speech;
non terminal SpecList spec, declarations, main;
non terminal string value;
non terminal FunctionValDefinition fixedFunction;

precedence left PLUS;
precedence left IMPLIES;
precedence left SAID;
precedence left PUT;
precedence left PROVISO;

start with main;

main ::= declarations fixedFunctionList spec:s {: RESULT = s; :} |
		 declarations spec:s {: RESULT = s; :};

fixedFunctionList ::= fixedFunction:ff {: fixedFunctions.Add(ff); :} SEMI | fixedFunctionList fixedFunction:ff SEMI {: fixedFunctions.Add(ff); :};

fixedFunction ::= FIX TOKEN:name EQUAL value:v {: RESULT = new FunctionValDefinition(name, new StringList(), v); :}
				| FIX TOKEN:name LPAREN argList:list RPAREN EQUAL value:v {: RESULT = new FunctionValDefinition(name, list, v); :};

value ::= TOKEN:t {: RESULT = t; :}| NUMBER:n {: RESULT = n; :};

argList ::= value:v {: RESULT = new StringList(); RESULT.Add(v); :} | argList:list COMMA value:v {: list.Add(v); RESULT = list; :};

declarations ::= PRINCIPAL principalList SEMI FUNCTION functionList SEMI;
principalList ::= TOKEN:p {: principalList.Add(p); :} | principalList COMMA TOKEN:p {: principalList.Add(p); :};

functionList ::= TOKEN:name COLON typeList:tList {: functions.Add(name, tList); :} | functionList COMMA TOKEN:name COLON typeList:tList {: functions.Add(name, tList); :};

typeList ::= VARIABLE:type {: 
			RESULT = new ArrayList(); 
			if (type == "Bool") type = "bool";
			RESULT.Add(type); 
			:} 
		| typeList:list IMPLIES VARIABLE:type {: 
			list.Add(type); 
			if (type == "Bool") type = "bool";
			RESULT = list; 
		:};


infon ::= regular:r {: RESULT = r; :}
		| object:p speech:sp  {: sp.setPrincipal(p); RESULT = sp; :}
		| infon:i1 PLUS infon:i2 {: RESULT = new Plus(i1, i2); :} 
		| infon:i1 IMPLIES infon:i2 {: RESULT = new Implies(i1, i2); :}
		| TRUE {: RESULT = new TrueInfon(); :}
		| LPAREN infon:i RPAREN {: RESULT = i; :};

speech ::= SAID infon:i {: RESULT = new Said(i); :}| PUT infon:i {: RESULT = new Put(i); :};

regular ::= VARIABLE:v {: RESULT = new Variable(v); ((Variable)RESULT).setType("Infon");:}
			| TOKEN:constant {: 
					RESULT = new Function(constant); 
					if (!functions.ContainsKey(constant) && !principalList.Contains(constant)) { 
						throw new Exception( constant + " not declared");
					}
				:}
			| TOKEN:name LPAREN regularList:arguments RPAREN {: 
					RESULT = new Function(name,arguments); 
					fillVariableTypes((Function)RESULT);
			  :};
			
regularList ::= regularList:arguments COMMA regular:reg {: arguments.Add(reg); RESULT = arguments; :}
				| regular:r {: System.Collections.ArrayList arguments = new System.Collections.ArrayList(); arguments.Add(r); RESULT = arguments; :};

spec ::= spec assertion:assert {: specs.Add(assert); RESULT = specs; :} | assertion:assert {: specs.Add(assert); RESULT = specs; :};

assertion ::= fact:f {: RESULT = f; :}| communication:c {: RESULT = c; :}| filter:f {: RESULT = f; :}| query:q {: RESULT = q; :};

communication ::= TOKEN:source TO object:dest COLON LBRACKET body:b RBRACKET SEMI {: 
						RESULT = new To(new Principal(source), dest, b); 
						if (!principalList.Contains(source)) { 
							throw new Exception("Principal " + source + " not declared");
						}
					:}
				| TOKEN:source TO object:dest COLON LBRACKET body:b RBRACKET CONDITIONAL infon:c SEMI {: 
						RESULT = new To(new Principal(source), dest, b, c); 
						if (!principalList.Contains(source)) { 
							throw new Exception("Principal " + source + " not declared");
						}	
					:};

filter ::= TOKEN:source FROM object:dest COLON LBRACKET body:b RBRACKET SEMI {: 
					RESULT = new From(new Principal(source), dest, b); 
					if (!principalList.Contains(source)) { 
						throw new Exception("Principal " + source + " not declared");
					}	
				:}
				| TOKEN:source FROM object:dest COLON LBRACKET body:b RBRACKET CONDITIONAL infon:c SEMI {: 
					RESULT = new From(new Principal(source), dest, b, c); 
					if (!principalList.Contains(source)) { 
						throw new Exception("Principal " + source + " not declared");
					}	
				:};

body ::= infon:i {: RESULT = new Proviso(i); :} 
				| infon:i PROVISO infon:p {: RESULT = new Proviso(i,p); :};

object ::= VARIABLE:v {: RESULT = new Principal(v,true); :}| TOKEN:p 
			{: RESULT = new Principal(p); if (!principalList.Contains(p)) { throw new Exception("Principal " + p + " not declared");;}	:};


fact ::= TOKEN:p KNOWS infon:i SEMI {: RESULT = new Fact(new Principal(p), i); if (!principalList.Contains(p)) { throw new Exception("Principal " + p + " not declared");}:};

query ::= QUESTION fact:f {: RESULT = new Query(f); :};
