%{
// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

open Microsoft.Research.Dkal.Interfaces
open Microsoft.Research.Dkal.Ast.Tree
open Microsoft.Research.Dkal.Ast
open Microsoft.Research.Dkal.Substrate
open Microsoft.Research.Dkal.Substrate.Basic

open System
open System.Collections.Generic

let mutable ns: string = null
%}

// ------------------------------------------------------------------------------------------------------
// The start tokens become parser functions in the compiled code:

%start ISubstrateTerm
%start Type

// ------------------------------------------------------------------------------------------------------
// These are the terminal tokens of the grammar along with the types of the data carried by each token:

// Delimiters
%token LPAR RPAR COMMA PIPE GETS

// Types
%token COLON TIMES TO

// Literals
%token TRUE FALSE
%token <System.Int32> INT_LITERAL
%token <System.Double> FLOAT_LITERAL
%token <System.String> STRING_LITERAL

// Identifiers
%token <System.String> LOWER_IDENTIFIER UPPER_IDENTIFIER

// EOF
%token EOF

// ------------------------------------------------------------------------------------------------------
// This is the type of the data produced by successful reductions of each 'start' symbol:

%type < ISubstrateTerm > ISubstrateTerm
%type < IType > Type

// ------------------------------------------------------------------------------------------------------
// These are the rules of the grammar 

%%

ISubstrateTerm:
  | Variable GETS ITerm EOF
    { new BasicSubstrateTerm($1, $3) :> ISubstrateTerm }
  | Literal GETS ITerm EOF
    { new BasicSubstrateTerm($1, $3) :> ISubstrateTerm }

ITerm:
	| LOWER_IDENTIFIER COLON Types TO Type LPAR ITerms RPAR	COLON ITerm		
    { App({ Name = $1; ArgsType = $3; RetType = $5; Identity = Some $10 }, $7) } 
	| LOWER_IDENTIFIER COLON Types TO Type LPAR ITerms RPAR	
    { App({ Name = $1; ArgsType = $3; RetType = $5; Identity = None }, $7) } 
	| Literal														                        { $1 }
	| Variable                                                  { $1 }
	| LPAR ITerm RPAR										                    		{ $2 }

ITerms:
	|										          	{ [] }
	| ITerm									      	{ [$1] }
	| ITerm COMMA ITerms						{ $1 :: $3 }

Variable:
  | UPPER_IDENTIFIER COLON Type	      { Var({ Name = $1; Type = $3 }) }

Literal:
	| TRUE										{ Constant(true) :> ITerm }
	| FALSE										{ Constant(false) :> ITerm }
	| INT_LITERAL							{ Constant($1) :> ITerm }
	| FLOAT_LITERAL						{ Constant($1) :> ITerm }
	| STRING_LITERAL					{ Constant($1) :> ITerm }
	| LOWER_IDENTIFIER				{ PrincipalConstant($1) :> ITerm }

Type:
	| UPPER_IDENTIFIER				{ Type.FromFullName $1 }

Types:
	|									      	{ [] }
	| Type									  { [$1] }
	| Type TIMES Types				{ $1 :: $3 }

