{
// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

module Microsoft.Research.Dkal.Ast.Infon.Syntax.Simple.Lexer

open System
open Microsoft.FSharp.Text.Lexing

open Parser

let lexeme lexbuf = LexBuffer<char>.LexemeString lexbuf
let stringBuf = new System.Text.StringBuilder()
let mutable remainingDelims = 0
let add (ch:char) = stringBuf.Append ch |> ignore
}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule tokenize = parse
// Whitespace
| whitespace		{ tokenize lexbuf }
| newline			  { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }

// Comments
| '/' '*'            { comment lexbuf }
| '/' '/' [^ '\n']*  { tokenize lexbuf }

// Binary infon operators
| "&&"				  { AND }
| "->"				  { IMPLIES }
| "||"				  { OR }

// Unary infon operators
| "not"				{ NOT }
| "asInfon"			{ AS_INFON }
| "said"		  	{ SAID }

// Delimiters
| "="				{ EQ }
| "{"				{ LBRACE }
| "}"				{ RBRACE }
| "("				{ LPAR }
| ")"				{ RPAR }
| "["				{ LSQ }
| "]"				{ RSQ }
| ":"				{ COLON }
| ";"				{ SEMICOLON }
| ","				{ COMMA }
| "."				{ DOT }
| "<-"				{ GETS }

// Wildcards
| "_"                 { WILDCARD }
| "me"                { ME }

// Substrate declarations
| "datasource"		{ SUBSTRATE } 
| "namespaces"		{ NAMESPACES } 

// Types
| "type"			{ TYPE }

// Relation declarations
| "relation"		{ RELATION }
| "dsrelation"      { DATASOURCERELATION }

// Macro declarations
| "macro"			{ MACRO }

// Variable declarations
| "with"			{ WITH }
| "forall"			{ FORALL }
| "let"             { LET }
| "fresh"			{ FRESH }

// Rules
| "do"			  { DO }
| "knows"			{KNOWS}

// Conditions
| "upon"        { UPON }
| "from"        { FROM }
| "if"          { IF }
| "else"		{ ELSE }

// Actions
| "send"			        { SEND }
| "say"			          { SAY }
| "justification"     { JUSTIFICATION }
| "to"				        { TO }
| "learn"			        { LEARN }
| "forget"			      { FORGET }
| "install"			      { INSTALL }
| "uninstall"		      { UNINSTALL }
| "apply"		          { APPLY }
| "freeze"              { FREEZE }


// Evidence
| "and"               { EV_AND }

// Literals
| "true"			{ TRUE } 
| "false"			{ FALSE } 
| ['-']?digit+									{ INT_LITERAL (Int32.Parse(lexeme lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?		{ FLOAT_LITERAL (Double.Parse(lexeme lexbuf)) }
| '"'                { stringBuf.Length <- 0;
                       string lexbuf;
                       STRING_LITERAL (stringBuf.ToString()) }

| "date"			{ DATE }
| "now"				{ NOW }

// Substrate expressions
| '{' '|' (whitespace|newline)* '"'? ['a'-'z''A'-'Z']* '"'? (whitespace|newline)* '|'       
    { let ns = lexeme lexbuf;
      let ns = ns.Substring(2, ns.Length-3).Trim();
      let ns = if ns="" then "basic" else ns;
      let ns = if ns.[0]='\"' then ns.Substring(1, ns.Length-2) else ns;
      stringBuf.Length <- 0;
      remainingDelims <- 0;
      substrate lexbuf;
      SUBSTRATE_EXPRESSION (ns, stringBuf.ToString()) }

// Identifiers
| ['a'-'z']+ ['a'-'z''A'-'Z''0'-'9''_']* 		{ LOWER_IDENTIFIER (lexeme lexbuf) }
| ['A'-'Z']+ ['a'-'z''A'-'Z''0'-'9''_''.']*		{ UPPER_IDENTIFIER (lexeme lexbuf) }

// EOF
| eof   { EOF }

and comment = parse 
| "*/"               { tokenize lexbuf }
| eof                { EOF }
| _                  { comment lexbuf }

and string = parse
| '"' { () }
| '\r' '\n' { lexbuf.EndPos <- lexbuf.EndPos.NextLine; add '\r'; add '\n'; string lexbuf }
| '\n' { lexbuf.EndPos <- lexbuf.EndPos.NextLine; add '\n'; string lexbuf }
| '\\' 'n' { add '\n'; string lexbuf }
| '\\' 'r' { add '\r'; string lexbuf }
| '\\' 't' { add '\t'; string lexbuf }
| '\\' _ { add (lexbuf.Lexeme.[1]); string lexbuf }
| [^ '\\' '"' '\n' '\r']+ { stringBuf.Append (lexeme lexbuf) |> ignore; string lexbuf }
| _ { add (lexbuf.Lexeme.[0]); string lexbuf }
| eof { () }

and substrate = parse
| '{' '|' { remainingDelims <- remainingDelims + 1;
            add "{".[0]; 
            add "|".[0]; 
            substrate lexbuf }
| '|' '}' { if remainingDelims > 0 then
              remainingDelims <- remainingDelims - 1;
              add "|".[0]; 
              add "}".[0]; 
              substrate lexbuf }
| '\n'    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; add (lexbuf.Lexeme.[0]); substrate lexbuf }
| _ { add (lexbuf.Lexeme.[0]); substrate lexbuf }
| eof { () }
