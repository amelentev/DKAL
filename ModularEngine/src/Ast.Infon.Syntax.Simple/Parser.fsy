%{
// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

open Microsoft.Research.Dkal.Interfaces
open Microsoft.Research.Dkal.Globals
open Microsoft.Research.Dkal.Ast
open Microsoft.Research.Dkal.Ast.Tree
open Microsoft.Research.Dkal.Ast.Infon
open Microsoft.Research.Dkal.Ast.Syntax.Parsing
open Microsoft.Research.Dkal.Substrate.Factories
open Microsoft.Research.Dkal.Substrate.Basic

open System
open System.Collections.Generic

let relations = new Dictionary<string, Function>()

let mutable ctxs = new Stack<IParsingContext>()

let primitiveApp (f: string, args: ITerm list) = 
  App((Primitives.SolveFunction f).Value, args)

let normalizeAndApplyMacros (t: ITerm, solvedMacros: ISubstrateQueryTerm list) =
  if t.Type = Type.Infon then
    (AndInfon <| List.map AsInfon solvedMacros @ [t]).Normalize(), []
  else 
    t.Normalize(), solvedMacros
%}

// ------------------------------------------------------------------------------------------------------
// The start tokens become parser functions in the compiled code:

%start Assembly
%start Signature
%start Policy
%start Term
%start Type

// ------------------------------------------------------------------------------------------------------
// These are the terminal tokens of the grammar along with the types of the data carried by each token:

// Binary infon operators
%token AND IMPLIES OR

// Unary infon operators
%token AS_INFON SAID

// Delimiters
%token EQ LPAR RPAR LBRACE RBRACE LSQ RSQ COLON SEMICOLON COMMA DOT GETS

// Wildcards
%token WILDCARD ME

// Substrate declarations
%token SUBSTRATE NAMESPACES

// Types
%token TYPE 

// Relation declarations
%token RELATION

// Macro declarations
%token MACRO

// Variable declarations
%token WITH LET FRESH FORALL

// Rules
%token DO KNOWS

// Conditions
%token UPON FROM IF

// Actions
%token SEND SAY JUSTIFICATION TO LEARN FORGET INSTALL UNINSTALL APPLY 

// Evidence
%token EV_AND

// Literals
%token TRUE FALSE
%token <System.Int32> INT_LITERAL
%token <System.Double> FLOAT_LITERAL
%token <System.String> STRING_LITERAL

// Substrate expressions
%token <System.String * System.String> SUBSTRATE_EXPRESSION

// Identifiers
%token <System.String> LOWER_IDENTIFIER UPPER_IDENTIFIER

// EOF
%token EOF

// ------------------------------------------------------------------------------------------------------
// This is the type of the data produced by successful reductions of each 'start' symbol:

%type < Assembly > Assembly
%type < Signature > Signature
%type < Policy > Policy
%type < ITerm * ISubstrateQueryTerm list > Term
%type < IType > Type

// ------------------------------------------------------------------------------------------------------
// Precedence of operators

%left WITH
%left UPON IF 
%left SEND SAY LEARN FORGET INSTALL UNINSTALL APPLY 
%right LSQ RSQ
%left IMPLIES
%left OR
%left AND
%right SAID

// ------------------------------------------------------------------------------------------------------
// These are the rules of the grammar 

%%

Assembly:
	| Signature Policy EOF							  { { Signature = $1; Policy = $2 } }

Signature:
	|										                	{ {Substrates = []; Relations = []} }
	| Signature SubstrateDeclaration 			{ {$1 with Substrates = $1.Substrates @ [$2]} }
	| Signature TypeDeclaration 			  	{ $1 }
	| Signature RelationDeclaration 			{ {$1 with Relations = $1.Relations @ [$2]} }
	| Signature MacroDeclaration 				  { $1 }

Policy:
	|										        	{ {Rules = []; KA = []} }	
	| Policy Rule   							
    { let rule, solvedMacros = normalizeAndApplyMacros $2
      if not solvedMacros.IsEmpty then failwithf "Unsolved macros at rule %O" rule
      {$1 with Rules = $1.Rules @ [rule]} }	
	| Policy KNOWS Infon   							
    { let ka, solvedMacros = normalizeAndApplyMacros $3
      if not solvedMacros.IsEmpty then failwithf "Unsolved macros at knowledge assertion %O" ka
      {$1 with KA = $1.KA @ [ka]} }

SubstrateDeclaration:
	| SUBSTRATE LOWER_IDENTIFIER 
		LPAR StringLiterals RPAR	
		NAMESPACES StringLiterals			    	
      { let s = SubstrateFactory.Substrate $2 $4 $7
        SubstrateMap.AddSubstrate s
        s }

TypeDeclaration:
	| TYPE UPPER_IDENTIFIER EQ Type				
    { ctxs.Peek().AddTypeRename($2, $4) }

RelationDeclaration:
	| RELATION LOWER_IDENTIFIER LPAR Args RPAR		
    { let rel = { Name = $2; ArgsType = (List.map (fun (v:IVar) -> v.Type) $4); RetType = Type.Infon; Identity = None}
      relations.[$2] <- rel
      { Name = $2; Args = $4 } }   

Args:
	|											      { [] }
	| Arg									    	{ [$1] }
	| Arg COMMA Args						{ $1 :: $3 }

Arg:
	| UPPER_IDENTIFIER COLON Type				{ {Name = $1; Type = $3} :> IVar }

Type:
	| UPPER_IDENTIFIER							{ ctxs.Peek().TypeFromName($1) }
	| Type LSQ RSQ								{ Type.CollectionType($1) :> IType }

MacroDeclaration:
	| MACRO LOWER_IDENTIFIER LPAR Args RPAR 
		COLON Type SUBSTRATE_EXPRESSION 
      { let ns, exp = $8;
        let localContext = new LocalParsingContext($4 @ [{Name="Ret"; Type=$7}], ctxs.Peek())
        let substrate = SubstrateMap.GetSubstrate ns
        let parser = SubstrateParserFactory.SubstrateParser substrate "simple" ns (Some <| (localContext :> IParsingContext))
        match parser.ParseTerm(exp) with
        | :? ISubstrateQueryTerm as body when body.Type = Type.SubstrateQuery ->
          ctxs.Peek().AddMacro($2, $7, body, $4)
        | _ ->
          failwithf "Macro %O body must be substrate query expression, regardless of return type" $2 }

VarsDeclaration:
  | WITH Args
    { ctxs.Push <| new LocalParsingContext($2, ctxs.Peek())
      $2 }

ForAllDeclaration:
  | FORALL Args
    { ctxs.Push <| new LocalParsingContext($2, ctxs.Peek())
      $2 }

Term:
| Infon                               { $1 }
| Principal                           { $1 }
| SubstrateTerm                       { $1 }
| Action                              { $1 }
| Condition                           { $1 }
| Rule                                { $1 }
| Evidence                            { $1 }
| Substrate                           { $1 }

Infon:
  | Variable        							    { $1, [] }
  | WILDCARD                          { Var(ctxs.Peek().FreshVar(Type.Infon)), [] }
	| LPAR Infon RPAR					    	    { $2 }
	| AS_INFON LPAR TRUE RPAR							  	            { primitiveApp(Primitives.EmptyInfon, []), [] }
	| AS_INFON LPAR SubstrateTerm RPAR
    { let t, solvedMacros = normalizeAndApplyMacros $3
      if t.Type = Type.Boolean then
        let bq = BasicSubstrateTerm(Constant(true), t) :> ISubstrateQueryTerm
        primitiveApp(Primitives.AsInfon, [bq]), solvedMacros
      else
        primitiveApp(Primitives.AsInfon, [t]), solvedMacros }
	| Infon IMPLIES Infon
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.Implies, [t1; t2]), sm1 @ sm2 }
	| Principal SAID Infon
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.Said, [t1; t2]), sm1 @ sm2 }
	| Infon AND Infon
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.And, [t1; t2]), sm1 @ sm2 }
	| Infon OR Infon
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.Or, [t1; t2]), sm1 @ sm2 }
  | Infon LSQ Evidence RSQ 
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.Justified, [t1; t2]), sm1 @ sm2 }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        // check if it is a relation
        let found, func = relations.TryGetValue $1
        if found then
          App(func, ts), (List.concat sms)
        else
          failwithf "Undefined identifier: %O" $1 }
  | ForAllDeclaration Infon
    { ctxs.Pop() |> ignore
      let t, solvedMacros = normalizeAndApplyMacros $2
      ForallMany($1, t), solvedMacros }

Principal:
  | Variable        						{ $1, [] }
  | WILDCARD                    { Var(ctxs.Peek().FreshVar(Type.Principal)), [] }
	| LPAR Principal RPAR					{ $2 }
	| ME                          { Const(PrincipalConstant(ctxs.Peek().Me)), [] }
  | LOWER_IDENTIFIER						{ Const(PrincipalConstant($1)), [] }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }

SubstrateTerm:
  | Variable        							    { $1, [] }
	| LPAR SubstrateTerm RPAR					  { $2 }
  | SUBSTRATE_EXPRESSION    
    { let ns, exp = $1
      let substrate = SubstrateMap.GetSubstrate ns
      let parser = SubstrateParserFactory.SubstrateParser substrate "simple" ns (Some <| ctxs.Peek())
      parser.ParseTerm exp :> ITerm, [] }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }

Action:
  | Variable        							      { $1, [] }
  | WILDCARD                            { Var(ctxs.Peek().FreshVar(Type.Action)), [] }
  | LPAR Action RPAR					          { $2 }
  | LET Variable GETS FRESH				{ primitiveApp(Primitives.Fresh, [$2]), [] }
  | SAY WITH JUSTIFICATION TO Principal COLON Infon
    { let t1, sm1 = normalizeAndApplyMacros $5
      let t2, sm2 = normalizeAndApplyMacros $7
      primitiveApp(Primitives.JustifiedSay, [t1; t2]), sm1 @ sm2 }
  | SEND WITH JUSTIFICATION TO Principal COLON Infon
    { let t1, sm1 = normalizeAndApplyMacros $5
      let t2, sm2 = normalizeAndApplyMacros $7
      primitiveApp(Primitives.JustifiedSend, [t1; t2]), sm1 @ sm2 }
  | SEND TO Principal COLON Infon
    { let t1, sm1 = normalizeAndApplyMacros $3
      let t2, sm2 = normalizeAndApplyMacros $5
      primitiveApp(Primitives.Send, [t1; t2]), sm1 @ sm2 }
  | LEARN Infon
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Learn, [t]), sm }
  | FORGET Infon
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Forget, [t]), sm }
  | INSTALL Rule
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Install, [t]), sm }
  | UNINSTALL Rule
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Uninstall, [t]), sm }
  | APPLY SubstrateTerm
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Apply, [t]), sm }
  | Action Action
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $2
      primitiveApp(Primitives.SeqAction, [t1; t2]), sm1 @ sm2 }
  | LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }

Condition:
  | Variable        							    { $1, [] }
  | WILDCARD                          { Var(ctxs.Peek().FreshVar(Type.Condition)), [] }
	| LPAR Condition RPAR					      { $2 }
  | UPON Infon 
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.WireCondition, [t; Var(ctxs.Peek().FreshVar(Type.Principal))]), sm }
  | UPON Infon FROM Principal
    { let t1, sm1 = normalizeAndApplyMacros $2
      let t2, sm2 = normalizeAndApplyMacros $4
      primitiveApp(Primitives.WireCondition, [t1; t2]), sm1 @ sm2 }
  | IF Infon
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.KnownCondition, [t]), sm }
  | Condition Condition
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $2
      primitiveApp(Primitives.SeqCondition, [t1; t2]), sm1 @ sm2 }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }

Rule:
  | Variable        							    { $1, [] }
  | WILDCARD                          { Var(ctxs.Peek().FreshVar(Type.Rule)), [] }
	| LPAR Rule RPAR					          { $2 }
  | DO Action
    { let t, sm = normalizeAndApplyMacros $2
      primitiveApp(Primitives.Rule, [primitiveApp(Primitives.EmptyCondition, []); t]), sm }
  | Condition DO Action
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.Rule, [t1; t2]), sm1 @ sm2 }
  | Rule Rule
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $2
      primitiveApp(Primitives.SeqRule, [t1; t2]), sm1 @ sm2 }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }
  | VarsDeclaration Rule
    { ctxs.Pop() |> ignore
      let t, solvedMacros = normalizeAndApplyMacros $2
      ForallMany($1, t), solvedMacros }
          
Evidence:
  | Variable        							    { $1, [] }
  | WILDCARD                          { Var(ctxs.Peek().FreshVar(Type.Evidence)), [] }
	| LPAR Evidence RPAR					    	{ $2 }
  | Evidence EV_AND Evidence
    { let t1, sm1 = normalizeAndApplyMacros $1
      let t2, sm2 = normalizeAndApplyMacros $3
      primitiveApp(Primitives.EvAnd, [t1; t2]), sm1 @ sm2 }
	| LOWER_IDENTIFIER LPAR Terms RPAR		
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }

Substrate:
	| Variable        							{ $1, [] }
	| LPAR Substrate RPAR					  { $2 }
	| Literal							      		{ $1, [] }
	| LOWER_IDENTIFIER LPAR Terms RPAR
    { let ts, sms = List.unzip (List.map normalizeAndApplyMacros $3)
      if ctxs.Peek().HasMacro($1) then
        let ret, solvedMacro = ctxs.Peek().ApplyMacro($1, ts)
        ret, (List.concat sms) @ [solvedMacro]
      else
        failwithf "Undefined identifier: %O" $1 }
	| Collection	{ $1 :> ITerm, [] }

Collection:
	| LSQ CollectionItems RSQ	{ Collection($2) }

CollectionItems:
	|									{ [] }
	| Literal							{ [$1 :?> IConst] }
	| Literal SEMICOLON CollectionItems	{ $1 :?> IConst :: $3 }

Terms:
	|											              { [] }
	| Term									            { [$1] }
	| Term COMMA Terms			          	{ $1 :: $3 }

Variable:
  | UPPER_IDENTIFIER 
    { Var({ Name = $1; Type = ctxs.Peek().VariableType $1 }) }

Literal:
	| TRUE									    	{ Const(Constant(true)) }
	| FALSE									    	{ Const(Constant(false)) }
	| INT_LITERAL						  		{ Const(Constant($1)) }
	| FLOAT_LITERAL								{ Const(Constant($1)) }
	| STRING_LITERAL							{ Const(Constant($1)) }

StringLiterals:
	|										                    	{ [] }
	| STRING_LITERAL						            	{ [$1] }
	| STRING_LITERAL COMMA StringLiterals	  	{ $1 :: $3 }
		