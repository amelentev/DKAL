%{
// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

open Microsoft.Research.Dkal.Interfaces
open Microsoft.Research.Dkal.Ast
open Microsoft.Research.Dkal.Ast.Tree
open Microsoft.Research.Dkal.Substrate.Xml

open System
open System.Collections.Generic

let mutable Namespace: string = null

%}

// ------------------------------------------------------------------------------------------------------
// The start tokens become parser functions in the compiled code:

%start XmlSubstrateTerm

// ------------------------------------------------------------------------------------------------------
// These are the terminal tokens of the grammar along with the types of the data carried by each token:

// Delimiters
%token PIPE MAPS COMMA COLON

// Literals
%token TRUE FALSE
%token <System.Int32> INT_LITERAL
%token <System.Double> FLOAT_LITERAL
%token <System.String> STRING_LITERAL

// Identifiers
%token <System.String> LOWER_IDENTIFIER UPPER_IDENTIFIER

// Update keywords
%token UPDATE INSERT DELETE

// EOF
%token EOF

// ------------------------------------------------------------------------------------------------------
// This is the type of the data produced by successful reductions of each 'start' symbol:

%type < ISubstrateTerm > XmlSubstrateTerm

// ------------------------------------------------------------------------------------------------------
// These are the rules of the grammar 

%%

XmlSubstrateTerm:
  //  query
  | STRING_LITERAL PIPE Mappings PIPE Vars
    { new XmlSubstrateQueryTerm(Namespace, $1, $5, Map.ofList $3) :> ISubstrateTerm }
  // insert
  | INSERT STRING_LITERAL PIPE Mappings PIPE Vars
    { new XmlSubstrateInsertTerm(Namespace, $2, $6, Map.ofList $4) :> ISubstrateTerm }
  // update
  | UPDATE STRING_LITERAL PIPE NodeModify PIPE Vars
    { new XmlSubstrateModifyTerm(Namespace, $2, $6, Map.ofList $4) :> ISubstrateTerm }
  // delete
  | DELETE STRING_LITERAL PIPE Vars
    { new XmlSubstrateModifyTerm(Namespace, $2, $4, Map.ofList ["", None]) :> ISubstrateTerm }

Mappings:
  | Mapping                                { [$1] }
  | Mapping COMMA Mappings                 { $1 :: $3 }

Mapping:
  | Term MAPS STRING_LITERAL      { ($3, $1) }
  | Term                          { ("", $1) }

AttrModify:
  | Mapping                     { (fst $1, Some(snd $1)) }
  | DELETE STRING_LITERAL       { ($2, None) }

NodeModify:
  | AttrModify                    { [$1] }
  | AttrModify COMMA NodeModify   { $1 :: $3 }

Vars:
  |                             { [] }
  | Var                         { [$1] }
  | Var COMMA Vars              { $1 :: $3 }

Var:
  | UPPER_IDENTIFIER COLON Type						              			{ { Name = $1; Type = $3 } :> IVar }

Type:
    | UPPER_IDENTIFIER				{ Type.FromFullName $1 }

Term:
  | Var                         { Var($1) }
  | Literal                     { $1 }

Literal:
  | TRUE                        { Const(Constant(true)) }
  | FALSE                       { Const(Constant(false)) }
  | INT_LITERAL                 { Const(Constant($1)) }
  | FLOAT_LITERAL               { Const(Constant($1)) }
  | STRING_LITERAL              { Const(Constant($1)) }
  | LOWER_IDENTIFIER            { Const(PrincipalConstant($1)) }
