%{
// *********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Apache License, Version 2.0.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// *********************************************************

open Microsoft.Research.Dkal.Interfaces
open Microsoft.Research.Dkal.Ast
open Microsoft.Research.Dkal.Ast.Tree
open Microsoft.Research.Dkal.Substrate.Xml

open System
open System.Collections.Generic
open System.Text.RegularExpressions

let mutable Context: IParsingContext option = None
let mutable Namespace: string = null

let replaceMeInQuery (query: string) = 
  (new Regex(@"\$Me\b")).Replace(query, Context.Value.Me)

let varsFromQuery (query: string) = 
  let ret = new HashSet<_>()
  let results = Regex.Matches(query, @"\$[A-Z]+([A-Z]|[a-z]|_|[0-9])*\b")
  for result in results do
    let varName = result.Value.Substring(1)
    ret.Add ({Name = varName; Type = Context.Value.VariableType(varName)} :> IVar) |> ignore
  ret |> Seq.toList

%}

// ------------------------------------------------------------------------------------------------------
// The start tokens become parser functions in the compiled code:

%start XmlSubstrateTerm

// ------------------------------------------------------------------------------------------------------
// These are the terminal tokens of the grammar along with the types of the data carried by each token:

// Delimiters
%token PIPE MAPS COMMA 

// Literals
%token TRUE FALSE
%token <System.Int32> INT_LITERAL
%token <System.Double> FLOAT_LITERAL
%token <System.String> STRING_LITERAL

// Identifiers
%token <System.String> LOWER_IDENTIFIER UPPER_IDENTIFIER

// Update keywords
%token UPDATE INSERT DELETE

// EOF
%token EOF

// ------------------------------------------------------------------------------------------------------
// This is the type of the data produced by successful reductions of each 'start' symbol:

%type < ISubstrateTerm > XmlSubstrateTerm

// ------------------------------------------------------------------------------------------------------
// These are the rules of the grammar 

%%

XmlSubstrateTerm:
  // query
  | STRING_LITERAL RightSide EOF    
    { let queryWithoutMeVariable = replaceMeInQuery($1)
      let vars = varsFromQuery(queryWithoutMeVariable)
      new XmlSubstrateQueryTerm(Namespace, queryWithoutMeVariable, vars, Map.ofList $2) :> ISubstrateTerm }
  // insert
  | INSERT STRING_LITERAL PIPE Mappings
    { let xpath = replaceMeInQuery($2)
      let vars = varsFromQuery(xpath)
      new XmlSubstrateInsertTerm(Namespace, xpath, vars, Map.ofList $4) :> ISubstrateTerm }
  // update
  | UPDATE STRING_LITERAL PIPE NodeModify
    { let xpath = replaceMeInQuery($2)
      let vars = varsFromQuery(xpath)
      new XmlSubstrateModifyTerm(Namespace, xpath, vars, Map.ofList $4) :> ISubstrateTerm }
  // delete
  | DELETE STRING_LITERAL
    { let xpath = replaceMeInQuery($2)
      let vars = varsFromQuery(xpath)
      new XmlSubstrateModifyTerm(Namespace, xpath, vars, Map.ofList ["", None]) :> ISubstrateTerm }

RightSide:
  |                                       { [("", Var(Context.Value.FreshVar (Type.String)))] }
  | PIPE Mappings                         { $2 }

Mappings:
  | Mapping                               { [$1] }
  | Mapping COMMA Mappings                { $1 :: $3 }

Mapping:
  | Term MAPS STRING_LITERAL    { ($3, $1) } 
  | Term                        { ("", $1) }

NodeModify:
  | AttrModify                    { [$1] }
  | AttrModify COMMA NodeModify   { $1 :: $3 }

AttrModify:
  | Mapping                     { (fst $1, Some(snd $1)) }
  | DELETE STRING_LITERAL       { ($2, None) }

Term:
  | Variable                    { Var($1) }
  | Literal                     { $1 }

Variable:
  | UPPER_IDENTIFIER            { {Name=$1; Type=Context.Value.VariableType($1)} }

Literal:
  | TRUE                        { Const(Constant(true)) }
  | FALSE                       { Const(Constant(false)) }
  | INT_LITERAL                 { Const(Constant($1)) }
  | FLOAT_LITERAL               { Const(Constant($1)) }
  | STRING_LITERAL              { Const(Constant($1)) }
  | LOWER_IDENTIFIER            { Const(PrincipalConstant($1)) }
