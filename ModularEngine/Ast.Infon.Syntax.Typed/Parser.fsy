%{
open Microsoft.Research.Dkal.Interfaces
open Microsoft.Research.Dkal.Globals
open Microsoft.Research.Dkal.Ast.Infon
open Microsoft.Research.Dkal.Ast.Tree
open Microsoft.Research.Dkal.Ast
open Microsoft.Research.Dkal.Substrate.Factories

open System
open System.Collections.Generic
%}

// ------------------------------------------------------------------------------------------------------
// The start tokens become parser functions in the compiled code:

%start Policy
%start ITerm
%start Type

// ------------------------------------------------------------------------------------------------------
// These are the terminal tokens of the grammar along with the types of the data carried by each token:

// Delimiters
%token LPAR RPAR COMMA 

// Types
%token COLON TIMES TO

// Literals
%token TRUE FALSE
%token <System.Int32> INT_LITERAL
%token <System.Double> FLOAT_LITERAL
%token <System.String> STRING_LITERAL

// Substrate expressions
%token <System.String * System.String> SUBSTRATE_EXPRESSION

// Identifiers
%token <System.String> LOWER_IDENTIFIER UPPER_IDENTIFIER

// EOF
%token EOF

// ------------------------------------------------------------------------------------------------------
// This is the type of the data produced by successful reductions of each 'start' symbol:

%type < Policy > Policy
%type < ITerm > ITerm
%type < IType > Type

// ------------------------------------------------------------------------------------------------------
// These are the rules of the grammar 

%%

Policy:
	|										        	{ { Rules = [] } }
	| Policy ITerm								{ { Rules = $1.Rules @ [$2] } }

ITerm:
	| LOWER_IDENTIFIER COLON Types TO Type LPAR ITerms RPAR	COLON ITerm		
    { App({ Name = $1; ArgsType = $3; RetType = $5; Identity = Some $10 }, $7) } 
	| LOWER_IDENTIFIER COLON Types TO Type LPAR ITerms RPAR	
    { App({ Name = $1; ArgsType = $3; RetType = $5; Identity = None }, $7) } 
	| Literal														                        { $1 }
	| UPPER_IDENTIFIER COLON Type						              			{ Var({ Name = $1; Type = $3 }) }
	| LPAR ITerm RPAR											              	      { $2 }
	| SUBSTRATE_EXPRESSION								         
    { let ns, exp = $1;
      let substrate = SubstrateMap.GetSubstrate ns;
      let parser = SubstrateParserFactory.SubstrateParser substrate "typed" ns None;
      parser.ParseTerm exp :> ITerm }

ITerms:
	|											    { [] }
	| ITerm										{ [$1] }
	| ITerm COMMA ITerms			{ $1 :: $3 }

Literal:
	| TRUE										{ Constant<bool>(true) :> ITerm }
	| FALSE										{ Constant<bool>(false) :> ITerm }
	| INT_LITERAL							{ Constant<int>($1) :> ITerm }
	| FLOAT_LITERAL						{ Constant<double>($1) :> ITerm }
	| STRING_LITERAL					{ Constant<string>($1) :> ITerm }
	| LOWER_IDENTIFIER				{ PrincipalConstant($1) :> ITerm }

Type:
	| UPPER_IDENTIFIER				{ Type.FromFullName $1 }

Types:
	|											    { [] }
	| Type										{ [$1] }
	| Type TIMES Types				{ $1 :: $3 }
