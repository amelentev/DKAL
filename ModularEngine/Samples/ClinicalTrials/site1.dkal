substrate sql("Server=localhost,1136;Database=edkaldemo;User ID=dkal;Password=dkal;Trusted_Connection=True;Encrypt=False;", "schema.dbml")
	namespaces "ct"

type Int = System.Int32
type Bool = System.Boolean
type Trial = Int

relation participates(SITE: Dkal.Principal, T: Trial)
relation allocatedPatients(SITE: Dkal.Principal, N1: Int, N2: Int, T: Trial)

relation physParticipates(PHYS: Dkal.Principal, T: Trial, SITE: Dkal.Principal)
relation physAllocatedPatients(PHYS: Dkal.Principal, P1: Int, P2: Int, Trial: Int, SITE: Dkal.Principal)
relation mayRead(PHYS: Dkal.Principal, R: Int)

macro physUnnotified(P: Int, T: Trial) : Bool
{|"ct"|physAssignments.phys == P && physAssignments.trial == T && Ret == physAssignments.unnotified|}
macro physPatients(P: Int, T: Trial, N1: Int, N2: Int) : Bool
{|"ct"|physAssignments.phys == P && physAssignments.trial == T && physAssignments.n1 == N1 && physAssignments.n2 == N2 && Ret == true|}

with TRIAL: Trial
	// TODO: participates(me, ...)
	if wire has org1 said participates(site1, TRIAL) then learn participates(site1, TRIAL)
with TRIAL: Trial, N1: Int, N2: Int
	if wire has org1 said allocatedPatients(site1, N1, N2, TRIAL) then learn allocatedPatients(site1, N1, N2, TRIAL)

with TRIAL: Trial, N1: Int, N2: Int, P: Int, P1: Int, P2: Int
	if me knows
		// TODO: participates(me, ...)
		participates(site1, TRIAL) && 
		allocatedPatients(site1, N1, N2, TRIAL) &&
		asInfon({|"ct"|
			physUnnotified(P, TRIAL) && physPatients(P, TRIAL, P1, P2)
			&& N1 <= P1 && P2 <= N2
		|})
	then
		send to phys1 // TODO: send to P
			physParticipates(phys1, TRIAL, site1) &&
			physAllocatedPatients(phys1, P1, P2, TRIAL, site1)
		/*TODO: send to phys1
			nr(
				if me knows
					asInfon({|"ct"|P1 <= N && N <= P2 && R == record(N,TRIAL)|})
				then
					site1 said mayRead(P, R)
			)*/