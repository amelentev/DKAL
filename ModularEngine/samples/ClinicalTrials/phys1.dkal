datasource sql("Server=localhost,1136;Database=ClinicalTrials;User ID=dkal;Password=dkal;Trusted_Connection=True;Encrypt=False;MultipleActiveResultSets=True;", "schema.dbml")
	namespaces "ct"

type Int = System.Int32
type Boolean = System.Boolean
type String = System.String
type Trial = Int
type Record = Int
type Principal = Dkal.Principal
type Infon = Dkal.Infon
type Evidence = Dkal.Evidence

relation physParticipates(PHYS: Principal, T: Trial, SITE: Principal)
relation physAllocatedPatients(PHYS: Principal, P1: Int, P2: Int, T: Trial, SITE: Principal)
relation requestToRead(P: Principal, R: Record)
relation mayRead(P: Principal, R: Record)
relation keyForRecord(K: Int, R: Record)

macro needInfo(N: Int) : Boolean
    {| "ct" | physPatients.id == N && 
                Ret == physPatients.needInfo |}

macro record (N: Int, T:Trial): Record
    {| "ct" | records.patient == N && 
                records.trial == T &&
                Ret == records.id |}

macro org(T: Trial) : String
    {| "ct" | T == trials.id && 
                Ret == trials.organizer |}

with P: Principal, I: Infon, E: Evidence
    upon
        P said I [E]
    do
        learn P said I [E]
with P: Principal, I1: Infon, I2: Infon, E: Evidence
    upon
        I1 -> P said I2 [E]
    do
        learn I1 -> P said I2 [E]

with X: Infon, Y: Infon, SITE: Principal, TRIAL: Trial, P1: Int, P2: Int, N: Int, ORG: Principal, R: Int, E1: Dkal.Evidence, E2: Dkal.Evidence
    if 
        SITE said physParticipates(me, TRIAL, SITE) [_]
    if
        SITE said physAllocatedPatients(me, P1, P2, TRIAL, SITE) [_]
    if
		asInfon({|"ct"|
			P1 <= N && N <= P2 &&
			needInfo(N) &&
			ppalName(ORG) == org(TRIAL) &&
			R == record(N, TRIAL)
		|})
    if
        X -> ORG said mayRead(me, R) [E1]
    if
        Y -> SITE said mayRead(me, R) [E2]
	do
		say with justification to keyMgr:
			requestToRead(me, R)
        send to keyMgr:
			X -> ORG said mayRead(me, R) [E1]
        send to keyMgr:
			Y -> SITE said mayRead(me, R) [E2]          