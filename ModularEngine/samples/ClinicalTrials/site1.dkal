datasource sql("Server=localhost,1136;Database=ClinicalTrials;User ID=dkal;Password=dkal;Trusted_Connection=True;Encrypt=False;MultipleActiveResultSets=True;", "schema.dbml")
	namespaces "ct"

type Int = System.Int32
type Boolean = System.Boolean
type String = System.String
type Trial = Int
type Record = Int
type Principal = Dkal.Principal
type Infon = Dkal.Infon
type Evidence = Dkal.Evidence

relation participates(SITE: Principal, T: Trial)
relation allocatedPatients(SITE: Principal, N1: Int, N2: Int, T: Trial)

relation physParticipates(PHYS: Principal, T: Trial, SITE: Dkal.Principal)
relation physAllocatedPatients(PHYS: Principal, P1: Int, P2: Int, Trial: Int, SITE: Dkal.Principal)
relation mayRead(PHYS: Dkal.Principal, R: Int)

macro physUnnotified(P: Principal, T: Trial) : Boolean
    {| "ct" | physAssignments.phys == ppalName(P) && 
                physAssignments.trial == T && 
                Ret == physAssignments.unnotified|}

macro physPatients(P: Principal, T: Trial, N1: Int, N2: Int) : Boolean
    {| "ct" | physAssignments.phys == ppalName(P) && 
                physAssignments.trial == T && 
                physAssignments.n1 == N1 && 
                physAssignments.n2 == N2 && 
                Ret == true|}

macro record (N: Int, T:Trial): Record
    {| "ct" | records.patient == N && 
                records.trial == T &&
                Ret == records.id |}

macro org(T: Trial) : String
    {| "ct" | T == trials.id && 
                Ret == trials.organizer |}

with ORG: Principal, I: Infon, E: Evidence
    upon
        ORG said I [E]
    do
        learn ORG said I [E]
with ORG: Principal, I1: Infon, I2: Infon, E: Evidence
    upon
        I1 -> ORG said I2 [E]
    do
        learn I1 -> ORG said I2 [E]

with X: Infon, TRIAL: Trial, N1: Int, N2: Int, P1: Int, P2: Int, PHYS: Principal, R: Record, ORG: Principal, E: Evidence
    if
        ORG said participates(me, TRIAL) [_]
    if
        ORG said allocatedPatients(me, N1, N2, TRIAL) [_]
    if
        asInfon({|"ct"| org(TRIAL) == ppalName(ORG) |}) &&
		asInfon({|"ct"|
			physUnnotified(PHYS, TRIAL) && physPatients(PHYS, TRIAL, P1, P2)
			&& N1 <= P1 && P2 <= N2 
		|})
    if
        X -> ORG said mayRead(PHYS, R) [E]
    do
		say with justification to PHYS:
			physParticipates(PHYS, TRIAL, me)
        say with justification to PHYS:
			physAllocatedPatients(PHYS, P1, P2, TRIAL, me)
		send with justification to PHYS:
			forall NUMBER: Int, R: Record
                asInfon({|"ct"|
                    P1 <= NUMBER && NUMBER <= P2 
                    && R == record(NUMBER,TRIAL)
                |})
                ->
                me said mayRead(PHYS, R)
		send to PHYS:
            X -> ORG said mayRead(PHYS, R) [E]
            