/// Interactive calculations
/// Alice performs arithmetic calculations with the help of Bob.

// common declarations
type Int = System.Int32

// Z is the sum of X and Y
relation sum(X: Int, Y: Int, Z: Int)

// The sum of X and Y is needed
relation needSum(X: Int, Y: Int)

// Z is the product of X and Y
relation product(X: Int, Y: Int, Z: Int)

// The product of X and Y is needed
relation needProduct(X: Int, Y: Int)

// P knows how to perform arithmetic calculations
relation knowsMath(P: Dkal.Principal)

---alice--------------------------
// alice's policy

// basic knowledge about needed arithmetic calculations and who knows math
knows needSum(1, 2)
knows needProduct(11, 22)
knows knowsMath(bob)

// general rule to solve sums
with X: Int, Y: Int, P: Dkal.Principal
    if
        needSum(X, Y) && knowsMath(P)
    do
        send to P:
            needSum(X, Y)
        forget
            needSum(X, Y)

// general rule to solve products
with X: Int, Y: Int, P: Dkal.Principal
    if
        needProduct(X, Y) && knowsMath(P)
    do
        send to P:
            needProduct(X, Y)
        forget
            needProduct(X, Y)

---bob--------------------------
// bob's policy

// general rule to help someone asking for sums
with X: Int, Y: Int, Z: Int, P: Dkal.Principal
    upon
        P said needSum(X, Y)
    if
        {||Z:=X+Y|}
    do
        send to P:
            sum(X, Y, Z)
            
// general rule to help someone asking for products
with X: Int, Y: Int, Z: Int, P: Dkal.Principal
    upon
        P said needProduct(X, Y)
    if
        {||Z:=X*Y|}
    do
        send to P:
            product(X, Y, Z)
