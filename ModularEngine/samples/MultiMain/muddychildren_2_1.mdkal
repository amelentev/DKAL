/// Logic: UFOL
/// This example models the muddy children problem
///
type String = System.String
type Int = System.Int32
type Principal = Dkal.Principal

relation dontKnow(P: Principal)
relation isMuddy(P: Principal)
relation isClean(P: Principal)
relation log(S: String)
relation question(N: Int)
relation hasConclusion()
relation startQuestionRound()
relation answered(P: Principal)
relation start()
relation end()
relation partialanswer()

/// In the beginning, each child knows:
/// - every other child status
/// - that is ignorant of its own status
/// - that no round has elapsed

---mom-----------------------------
knows start()
knows question(0)

with X:Int
	if start() && question(X) do
		forget isMuddy(alice)
		forget isClean(alice)
		forget dontKnow(alice)
		forget isMuddy(bob)
		forget isClean(bob)
		forget dontKnow(bob)
		send to alice: question(X)
		send to bob: question(X)
		forget start()

with P: Principal
	upon P said isMuddy(P) do
		learn isMuddy(P) learn answered(P)
	upon P said isClean(P) do
		learn isClean(P) learn answered(P)
	upon P said dontKnow(P) do
		learn dontKnow(P)
		learn answered(P)
		learn partialanswer()

with X:Int, Y:Int
if
	answered(alice) && 
	answered(bob) && 
	partialanswer() &&
	question(X) && asInfon({|"basic"|Y:=X+1|})
do
	learn start()
	forget answered(alice)
	forget answered(bob)
	forget partialanswer()
	forget question(X)
	learn question(Y)

---alice-----------------------------
knows dontKnow(me)
knows not end()
knows not bob said isMuddy(bob)
knows not bob said isClean(bob)

knows isClean(bob)

upon bob said isMuddy(bob) do
	relearn bob said isMuddy(bob)
upon bob said isClean(bob) do
	relearn bob said isClean(bob)

with X:Int
	upon mom said question(X) do
		learn question(X)
		learn startQuestionRound()

with P: Dkal.Principal
	if P said isClean(P) && not end() && startQuestionRound() do
		learn hasConclusion()
		learn isMuddy(me)
		forget dontKnow(me)
		forget startQuestionRound()

// I check whether I see no muddy faces (if I see no muddy faces, I must be muddy myself).
if question(0) && asInfon({|"basic"|true|}) && not end() do
	learn hasConclusion()
	learn isMuddy(me)
	forget dontKnow(me)
	forget startQuestionRound()

// If I see a certain number of muddy faces and mom has asked less times than that, then I cannot be sure if I am muddy or not.
// If mom has asked as many times as muddy faces I see, I need to pay attention to what the muddy children do.
// If they don't say they are muddy, it is because they are not sure. If they are not sure it must be because they see another muddy face -- mine.
// If however they do say they are muddy, they must be sure of that. Therefore they don't see another muddy face. I must be clean.

with X:Int
	if question(X) do forget question(X)
if hasConclusion() do
	forget hasConclusion()

if hasConclusion() && isMuddy(me) && not end()
do
	send to mom: isMuddy(me)
	send to bob: isMuddy(me)
	relearn end()

if hasConclusion() && isClean(me) && not end()
do
	send to mom: isClean(me)
	send to bob: isClean(me)
	relearn end()

if hasConclusion() && dontKnow(me) && not end()
do
	send to mom: dontKnow(me)
	send to bob: dontKnow(me)


---bob-----------------------------
knows dontKnow(me)
knows not end()
knows not alice said isMuddy(alice)
knows not alice said isClean(alice)

knows isMuddy(alice)

upon alice said isMuddy(alice) do
	relearn alice said isMuddy(alice)
upon alice said isClean(alice) do
	relearn alice said isClean(alice)

with X:Int
	upon mom said question(X) do
		learn question(X)
		learn startQuestionRound()

with P: Dkal.Principal
	if P said isClean(P) && not end() && startQuestionRound() do
		learn hasConclusion()
		learn isMuddy(me)
		forget dontKnow(me)
		forget startQuestionRound()

// I check whether I see no muddy faces (if I see no muddy faces, I must be muddy myself).
if question(0) && asInfon({|"basic"|false|}) && not end() do
	learn hasConclusion()
	learn isMuddy(me)
	forget dontKnow(me)
	forget startQuestionRound()

// If I see a certain number of muddy faces and mom has asked less times than that, then I cannot be sure if I am muddy or not.
with X: Int
	if question(X) && asInfon({|"basic"|X < 1|}) && not end() && startQuestionRound() do
		learn hasConclusion()
		forget startQuestionRound()

// If mom has asked as many times as muddy faces I see, I need to pay attention to what the muddy children do.
// If they don't say they are muddy, it is because they are not sure. If they are not sure it must be because they see another muddy face -- mine.
with X:Int, P0: Principal
	if question(X) && asInfon({|"basic"|X := 1|}) && not end() && startQuestionRound() && asInfon({|"basic"|true|}) && isMuddy(P0) && not P0 said isMuddy(P0)  do
		learn hasConclusion()
		learn isMuddy(me)
 		forget dontKnow(me)
 		forget startQuestionRound()

// If however they do say they are muddy, they must be sure of that. Therefore they don't see another muddy face. I must be clean.
with X:Int, P0: Principal
	if question(X) && asInfon({|"basic"|X := 1|}) && not end() && startQuestionRound() && asInfon({|"basic"|true|}) && (asInfon({|"basic"|false|})|| P0 said isMuddy(P0)) do
		learn hasConclusion()
		learn isClean(me)
		forget dontKnow(me)
		forget startQuestionRound()


with X:Int
	if question(X) do forget question(X)
if hasConclusion() do
	forget hasConclusion()

if hasConclusion() && isMuddy(me) && not end()
do
	send to mom: isMuddy(me)
	send to alice: isMuddy(me)
	relearn end()

if hasConclusion() && isClean(me) && not end()
do
	send to mom: isClean(me)
	send to alice: isClean(me)
	relearn end()

if hasConclusion() && dontKnow(me) && not end()
do
	send to mom: dontKnow(me)
	send to alice: dontKnow(me)


