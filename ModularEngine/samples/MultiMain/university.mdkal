/// This example models a very small university with 2 professors and a student.
/// The professors share exam contents with each other. The student tries to do
/// the same, but he is denied access.

// common declarations
type Principal = Dkal.Principal
type Int = System.Int32
type String = System.String
type Boolean = System.Boolean

type Subject = String

// PERSON has the need to get the contents of the exam for SUBJECT
relation needsExamContents(PERSON: Principal, SUBJECT: Subject)

// PERSON is asking for the contents of the exam for SUBJECT
relation asksForExamContents(PERSON: Principal, SUBJECT: Subject)

// the contents of the exam for SUBJECT are CONTENTS
relation examContents(SUBJECT: Subject, CONTENTS: String)

// a datasource known to all the principals, contains basic information on
// each subject: assigned professors and enrolled students 
datasource xml("<subjects>
                    <subject name='calculus'>
                        <professor name='smith' />
                    </subject>
                    <subject name='programming' >
                        <professor name='smith' />
                        <professor name='suresh' />
                        <student name='david' />
                    </subject>
                </subjects>") 
    namespaces "subjects"

// PROFESSOR works at the university
macro isProfessor(PROFESSOR: Principal) : Boolean
    {| "basic" | Ret := asBoolean({| "subjects" | "//professor/@name" | PROFESSOR |}) |}

// SUBJECT is lectured at the university
macro isSubject(SUBJECT: Subject) : Boolean
    {| "basic" | Ret := asBoolean({| "subjects" | "//subject/@name" | SUBJECT |}) |}
    
// PROFESSOR gives lectures in SUBJECT
macro givesLectures(PROFESSOR: Principal, SUBJECT: Subject) : Boolean
    {| "basic" | Ret := asBoolean({| "subjects" | "//subject[@name='$SUBJECT']/professor[@name='$PROFESSOR']" |}) |}
    
// STUDENT is enrolled in SUBJECT
macro enrolledIn(STUDENT: Principal, SUBJECT: Subject) : Boolean
    {| "basic" | Ret := asBoolean({| "subjects" | "//subject[@name='$SUBJECT']/student[@name='$STUDENT']" |}) |}
    
---smith--------------------------
// prof. smith's policy

datasource xml("<exams>
                    <exam subject='calculus' contents='what is the derivative of e^x?' />
                    <exam subject='programming' contents='is quicksort better than mergesort?' />
                </exams>") 
    namespaces "exams"

with P: Principal, SUBJECT: Subject, CONTENTS: String
    upon
        P said asksForExamContents(P, SUBJECT)
    if
        asInfon(givesLectures(P, SUBJECT)) &&
        asInfon({| "exams" | "//exam[@subject='$SUBJECT']/@contents" | CONTENTS |}) 
    do
        send to P:
            examContents(SUBJECT, CONTENTS)
            
---suresh--------------------------
// prof. suresh's policy

knows needsExamContents(me, "programming")
    
with PROF: Principal, SUBJECT: Subject, CONTENTS: String
    if 
        needsExamContents(me, SUBJECT) && 
        asInfon(isProfessor(PROF)) &&
        asInfon(givesLectures(PROF, SUBJECT)) &&
        asInfon(givesLectures(me, SUBJECT)) &&
        asInfon({| "basic" | PROF != me |})
    do
        send to PROF:
            asksForExamContents(me, SUBJECT)
        forget
            needsExamContents(me, SUBJECT)
            
---david--------------------------
// david's policy

with PROF: Principal, SUBJECT: Subject
    if 
        asInfon(isSubject(SUBJECT)) &&
        asInfon(enrolledIn(me, SUBJECT)) &&
        asInfon(isProfessor(PROF)) &&
        asInfon(givesLectures(PROF, SUBJECT))
    do
        send to PROF:
            asksForExamContents(me, SUBJECT)
