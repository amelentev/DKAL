
//----------------------------------------------------
// The following code was generated by C# CUP v0.1
// 10/14/2010 6:21:39 PM
//----------------------------------------------------

using System.Collections;
using System.Collections.Generic;
using DkalPrimalProver;
using System.IO;
using System;
using TUVienna.CS_CUP.Runtime;

/** C# CUP v0.1 generated parser.
  * @version 10/14/2010 6:21:39 PM
  */
public class Parser : TUVienna.CS_CUP.Runtime.lr_parser {

  /** Default constructor. */
  public Parser():base() {;}

  /** Constructor which sets the default scanner. */
  public Parser(TUVienna.CS_CUP.Runtime.Scanner s): base(s) {;}

  /** Production table. */
  protected static readonly short[][] _production_table = 
    unpackFromStrings(new string[] {
    "/000/035/000/002/002/004/000/002/024/004/000/002/023" +
    "/010/000/002/016/003/000/002/016/005/000/002/017/005" +
    "/000/002/017/007/000/002/015/003/000/002/015/005/000" +
    "/002/003/003/000/002/003/004/000/002/003/005/000/002" +
    "/003/005/000/002/003/003/000/002/003/005/000/002/010" +
    "/003/000/002/021/004/000/002/021/004/000/002/004/003" +
    "/000/002/004/003/000/002/004/006/000/002/014/005/000" +
    "/002/014/003/000/002/022/004/000/002/022/003/000/002" +
    "/005/003/000/002/005/003/000/002/013/004/000/002/012" +
    "/004" });

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static readonly short[][] _action_table = 
    unpackFromStrings(new string[] {
    "/000/070/000/004/032/006/001/002/000/004/002/072/001" +
    "/002/000/014/010/037/021/033/022/036/024/041/031/044" +
    "/001/002/000/004/021/007/001/002/000/006/004/ufffe/005" +
    "/ufffe/001/002/000/006/004/011/005/012/001/002/000/004" +
    "/021/030/001/002/000/004/033/013/001/002/000/004/021" +
    "/014/001/002/000/004/026/026/001/002/000/006/004/016" +
    "/005/017/001/002/000/004/021/020/001/002/000/014/010" +
    "/uffff/021/uffff/022/uffff/024/uffff/031/uffff/001/002/000/004" +
    "/026/021/001/002/000/004/022/022/001/002/000/010/004" +
    "/ufffa/005/ufffa/007/ufffa/001/002/000/010/004/ufffb/005/ufffb" +
    "/007/024/001/002/000/004/022/025/001/002/000/010/004" +
    "/ufff9/005/ufff9/007/ufff9/001/002/000/004/022/022/001/002" +
    "/000/010/004/ufffc/005/ufffc/007/024/001/002/000/006/004" +
    "/ufffd/005/ufffd/001/002/000/016/002/000/010/037/021/033" +
    "/022/036/024/041/031/044/001/002/000/016/002/uffe9/010" +
    "/uffe9/021/uffe9/022/uffe9/024/uffe9/031/uffe9/001/002/000/020" +
    "/005/uffee/006/uffee/007/uffee/012/ufff2/013/ufff2/024/062/025" +
    "/uffee/001/002/000/012/005/ufff8/006/ufff8/007/ufff8/025/ufff8" +
    "/001/002/000/010/005/061/006/052/007/053/001/002/000" +
    "/014/004/uffef/005/uffef/006/uffef/007/uffef/025/uffef/001/002" +
    "/000/012/005/ufff4/006/ufff4/007/ufff4/025/ufff4/001/002/000" +
    "/016/002/uffe8/010/uffe8/021/uffe8/022/uffe8/024/uffe8/031/uffe8" +
    "/001/002/000/012/010/037/021/033/022/036/024/041/001" +
    "/002/000/006/012/050/013/047/001/002/000/016/002/uffe7" +
    "/010/uffe7/021/uffe7/022/uffe7/024/uffe7/031/uffe7/001/002/000" +
    "/012/010/037/021/033/022/036/024/041/001/002/000/016" +
    "/002/uffe5/010/uffe5/021/uffe5/022/uffe5/024/uffe5/031/uffe5/001" +
    "/002/000/012/005/ufff7/006/ufff7/007/ufff7/025/ufff7/001/002" +
    "/000/012/010/037/021/033/022/036/024/041/001/002/000" +
    "/012/010/037/021/033/022/036/024/041/001/002/000/012" +
    "/005/ufff1/006/ufff1/007/ufff1/025/ufff1/001/002/000/012/010" +
    "/037/021/033/022/036/024/041/001/002/000/012/010/037" +
    "/021/033/022/036/024/041/001/002/000/012/005/ufff5/006" +
    "/ufff5/007/ufff5/025/ufff5/001/002/000/012/005/ufff6/006/ufff6" +
    "/007/053/025/ufff6/001/002/000/012/005/ufff0/006/ufff0/007" +
    "/ufff0/025/ufff0/001/002/000/010/006/052/007/053/025/060" +
    "/001/002/000/012/005/ufff3/006/ufff3/007/ufff3/025/ufff3/001" +
    "/002/000/016/002/uffe6/010/uffe6/021/uffe6/022/uffe6/024/uffe6" +
    "/031/uffe6/001/002/000/006/021/063/022/036/001/002/000" +
    "/010/004/uffee/024/062/025/uffee/001/002/000/006/004/uffeb" +
    "/025/uffeb/001/002/000/006/004/066/025/067/001/002/000" +
    "/006/021/063/022/036/001/002/000/014/004/uffed/005/uffed" +
    "/006/uffed/007/uffed/025/uffed/001/002/000/006/004/uffec/025" +
    "/uffec/001/002/000/016/002/uffea/010/uffea/021/uffea/022/uffea" +
    "/024/uffea/031/uffea/001/002/000/004/002/001/001/002" });

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static readonly short[][] _reduce_table = 
    unpackFromStrings(new string[] {
    "/000/070/000/006/023/004/024/003/001/001/000/002/001" +
    "/001/000/020/003/034/004/033/005/031/010/041/012/042" +
    "/013/037/022/030/001/001/000/004/016/007/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/004/017/014/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/004/015/022/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001/000/004" +
    "/015/026/001/001/000/002/001/001/000/002/001/001/000" +
    "/016/003/034/004/033/005/070/010/041/012/042/013/037" +
    "/001/001/000/002/001/001/000/002/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/010/003/056/004/033/010/041/001" +
    "/001/000/004/021/045/001/001/000/002/001/001/000/012" +
    "/003/034/004/033/010/041/013/044/001/001/000/002/001" +
    "/001/000/002/001/001/000/010/003/055/004/033/010/041" +
    "/001/001/000/010/003/050/004/033/010/041/001/001/000" +
    "/002/001/001/000/010/003/054/004/033/010/041/001/001" +
    "/000/010/003/053/004/033/010/041/001/001/000/002/001" +
    "/001/000/002/001/001/000/002/001/001/000/002/001/001" +
    "/000/002/001/001/000/002/001/001/000/006/004/063/014" +
    "/064/001/001/000/002/001/001/000/002/001/001/000/002" +
    "/001/001/000/004/004/067/001/001/000/002/001/001/000" +
    "/002/001/001/000/002/001/001/000/002/001/001" });

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_Parser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_Parser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override TUVienna.CS_CUP.Runtime.Symbol do_action(
    int                        act_num,
    TUVienna.CS_CUP.Runtime.lr_parser parser,
    System.Collections.Stack            xstack1,
    int                        top)
  {
  dStack CUP_parser_stack= new dStack(xstack1);
    /* call code in generated class */
    return action_obj.CUP_Parser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}


  /** User initialization code. */
  public override void user_init() 
    {


	//built-in functions

	//tdonP and tdonS
	action_obj.getFunctions().Add(Resources.TdonSName, Resources.TdonArgs);
	action_obj.getFunctions().Add(Resources.TdonIName, Resources.TdonArgs);

    }





	public StringList getPrincipalList(){

		return action_obj.getPrincipalList();

	}

	

	public FunctionDictionary getFunctions(){

		return action_obj.getFunctions();

	}


}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_Parser_actions {




	SpecList specs = new SpecList();
	StringList principalList = new StringList();
	FunctionDictionary functions = new FunctionDictionary();


	public StringList getPrincipalList(){

		return principalList;

	}

	public FunctionDictionary getFunctions(){

		return functions;

	}


	/* Completes the type of the variables looking at the declared type

	*/

	void fillVariableTypes(Function f){



		if (functions.ContainsKey(f.getName())){

			ArrayList declaredArgs;

            functions.TryGetValue(f.getName(), out declaredArgs);

			

			if (declaredArgs.Count != f.getArguments().Count + 1){

                throw new Exception("The function " + f.getName() + " was previously specified with a different number of arguments");

			}

			for (int i = 0; i < f.getArguments().Count; i++){

				if (f.getArguments()[i] is Variable){

					((Variable)(f.getArguments()[i])).setType((string)declaredArgs[i]);

				}

			}

		} else{

            throw new Exception("The function " + f.getName() + " was not declared");

		}

	

	}


  private Parser my_parser;

  /** Constructor */
  public CUP_Parser_actions(Parser t_parser) {
    this.my_parser = t_parser;
  }

  /** Method with the actual generated action code. */
  public   TUVienna.CS_CUP.Runtime.Symbol CUP_Parser_do_action(
    int                        CUP_Parser_act_num,
    TUVienna.CS_CUP.Runtime.lr_parser CUP_Parser_parser,
    System.Collections.Stack            xstack1,
    int                        CUP_Parser_top)
    {
      /* Symbol object for return from actions */
      dStack CUP_Parser_stack =new dStack(xstack1);
      TUVienna.CS_CUP.Runtime.Symbol CUP_Parser_result;

      /* select the action based on the action number */
      switch (CUP_Parser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // query ::= QUESTION fact 
            {
              Query RESULT = null;
		int fleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int fright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Fact f = (Fact)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Query(f); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(8/*query*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fact ::= infon SEMI 
            {
              Fact RESULT = null;
		int ileft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int iright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		Infon i = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		 RESULT = new Fact(i); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(9/*fact*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assertion ::= query 
            {
              Spec RESULT = null;
		int qleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int qright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Query q = (Query)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = q; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*assertion*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assertion ::= fact 
            {
              Spec RESULT = null;
		int fleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int fright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Fact f = (Fact)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = f; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(3/*assertion*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // spec ::= assertion 
            {
              SpecList RESULT = null;
		int assertleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int assertright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Spec assert = (Spec)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 specs.Add(assert); RESULT = specs; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(16/*spec*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // spec ::= spec assertion 
            {
              SpecList RESULT = null;
		int assertleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int assertright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Spec assert = (Spec)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 specs.Add(assert); RESULT = specs; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(16/*spec*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // regularList ::= regular 
            {
              System.Collections.ArrayList RESULT = null;
		int rleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int rright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon r = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 System.Collections.ArrayList arguments = new System.Collections.ArrayList(); arguments.Add(r); RESULT = arguments; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*regularList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // regularList ::= regularList COMMA regular 
            {
              System.Collections.ArrayList RESULT = null;
		int argumentsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int argumentsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		System.Collections.ArrayList arguments = (System.Collections.ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int regleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int regright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon reg = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 arguments.Add(reg); RESULT = arguments; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(10/*regularList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // regular ::= TOKEN LPAREN regularList RPAREN 
            {
              Infon RESULT = null;
		int nameleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left;
		int nameright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).right;
		string name = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-3)).value;
		int argumentsleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int argumentsright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		System.Collections.ArrayList arguments = (System.Collections.ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		 

					RESULT = new Function(name,arguments); 

					fillVariableTypes((Function)RESULT);
					
					ArrayList declaredArgs;
					functions.TryGetValue(name, out declaredArgs);
					((Function)RESULT).setReturnType((string)declaredArgs[declaredArgs.Count-1]);
			  
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*regular*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-3)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // regular ::= TOKEN 
            {
              Infon RESULT = null;
		int constantleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int constantright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string constant = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 

					Function function =  new Function(constant); 

					if (!functions.ContainsKey(constant) && !principalList.Contains(constant)) { 

						throw new Exception( constant + " not declared");

					}
					else if (principalList.Contains(constant))
					{
						function.setReturnType("Principal");
					}
					else
					{
						ArrayList declaredArgs;
						functions.TryGetValue(constant, out declaredArgs);

						function.setReturnType((string)declaredArgs[declaredArgs.Count-1]);
					}
					
					RESULT = function;
				
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*regular*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // regular ::= VARIABLE 
            {
              Infon RESULT = null;
		int vleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int vright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string v = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Variable(v); ((Variable)RESULT).setType("Infon");
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*regular*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // speech ::= IMPLIED infon 
            {
              SaidImplied RESULT = null;
		int ileft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int iright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon i = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Implied(i); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(15/*speech*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // speech ::= SAID infon 
            {
              SaidImplied RESULT = null;
		int ileft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int iright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon i = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Said(i); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(15/*speech*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // principal ::= TOKEN 
            {
              Principal RESULT = null;
		int tleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int tright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string t = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 
					if ( !principalList.Contains(t) )
					{
						throw new Exception("Principal " + t + " not declared");
					}
					RESULT = new Principal(t); 
					
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(6/*principal*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // infon ::= LPAREN infon RPAREN 
            {
              Infon RESULT = null;
		int ileft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int iright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		Infon i = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		 RESULT = i; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // infon ::= TRUE 
            {
              Infon RESULT = null;
		 RESULT = new TrueInfon(); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // infon ::= infon IMPLIES infon 
            {
              Infon RESULT = null;
		int i1left = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int i1right = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		Infon i1 = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int i2left = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int i2right = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon i2 = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Implies(i1, i2); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // infon ::= infon PLUS infon 
            {
              Infon RESULT = null;
		int i1left = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int i1right = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		Infon i1 = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int i2left = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int i2right = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon i2 = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = new Plus(i1, i2); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // infon ::= principal speech 
            {
              Infon RESULT = null;
		int pleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int pright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		Principal p = (Principal)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		int spleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int spright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		SaidImplied sp = (SaidImplied)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 sp.setPrincipal(p); RESULT = sp; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // infon ::= regular 
            {
              Infon RESULT = null;
		int rleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int rright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		Infon r = (Infon)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = r; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*infon*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typeList ::= typeList IMPLIES VARIABLE 
            {
              System.Collections.ArrayList RESULT = null;
		int listleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int listright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		System.Collections.ArrayList list = (System.Collections.ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 

			list.Add(type); 
			RESULT = list; 

		
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*typeList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typeList ::= VARIABLE 
            {
              System.Collections.ArrayList RESULT = null;
		int typeleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int typeright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string type = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 

			RESULT = new ArrayList(); 
			RESULT.Add(type); 

			
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(11/*typeList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functionList ::= functionList COMMA TOKEN COLON typeList 
            {
              System.Collections.ArrayList RESULT = null;
		int nameleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int nameright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string name = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int tListleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int tListright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		System.Collections.ArrayList tList = (System.Collections.ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 
					if ( principalList.Contains(name) || functions.ContainsKey(name))
					{
						throw new Exception("The name " + name + " was already used");
					}
					functions.Add(name, tList); 
				
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*functionList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-4)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functionList ::= TOKEN COLON typeList 
            {
              System.Collections.ArrayList RESULT = null;
		int nameleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left;
		int nameright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).right;
		string name = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-2)).value;
		int tListleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int tListright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		System.Collections.ArrayList tList = (System.Collections.ArrayList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 
					if ( principalList.Contains(name) || functions.ContainsKey(name))
					{
						throw new Exception("The name " + name + " was already used");
					}
					functions.Add(name, tList); 
				
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(13/*functionList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principalList ::= principalList COMMA TOKEN 
            {
              System.Collections.ArrayList RESULT = null;
		int pleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int pright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string p = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 principalList.Add(p); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*principalList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-2)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // principalList ::= TOKEN 
            {
              System.Collections.ArrayList RESULT = null;
		int pleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int pright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		string p = (string)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 principalList.Add(p); 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(12/*principalList*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= PRINCIPAL principalList SEMI FUNCTION functionList SEMI 
            {
              SpecList RESULT = null;

              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(17/*declarations*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-5)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= declarations spec 
            {
              SpecList RESULT = null;
		int sleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).left;
		int sright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right;
		SpecList s = (SpecList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-0)).value;
		 RESULT = s; 
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(18/*main*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          return CUP_Parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              object RESULT = null;
		int start_valleft = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left;
		int start_valright = ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).right;
		SpecList start_val = (SpecList)((TUVienna.CS_CUP.Runtime.Symbol) CUP_Parser_stack.elementAt(CUP_Parser_top-1)).value;
		RESULT = start_val;
              CUP_Parser_result = new TUVienna.CS_CUP.Runtime.Symbol(0/*$START*/, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-1)).left, ((TUVienna.CS_CUP.Runtime.Symbol)CUP_Parser_stack.elementAt(CUP_Parser_top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP_Parser_parser.done_parsing();
          return CUP_Parser_result;

          /* . . . . . .*/
          default:
            throw new System.Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

